import PropTypes from 'prop-types';
import React, { Component } from 'react';
import * as Proto from '../../../proto/emulator_controller_pb';
import ResizeObserver from 'react-resize-observer';

/**
 * A view on the emulator that is generated by streaming a series of screenshots.
 *
 * Note: This is very expensive when running remote, and does not support audio.
 */
export default class EmulatorPngView extends Component {
  static propTypes = {
    /** Emulator service used to retrieve screenshots. */
    emulator: PropTypes.object,
    /** Streaming Edge node ID */
    edgeNodeId: PropTypes.string.isRequired,
    /** TODO: this is not used, remove */
    logger: PropTypes.object.isRequired,
    /** The width of the component */
    width: PropTypes.number,
    /** True if polling should be used, only set this to true if you are using the gowebrpc proxy. */
    poll: PropTypes.bool,
    /** The width of the emulator device */
    deviceWidth: PropTypes.number,
    /** The height of the emulator device */
    deviceHeight: PropTypes.number,
  };

  state = {
    png: '',
    width: null,
    height: null,
  };

  componentDidMount() {
    this.startStream();
  }

  componentWillUnmount() {
    if (this.screen) {
      this.screen.cancel();
    }
  }

  startStream() {
    const { width, height } = this.state;
    if (this.screen) {
      this.screen.cancel();
    }
    var request = new Proto.ImageFormat();
    if (!isNaN(width)) {
      request.setWidth(Math.floor(width));
      request.setHeight(Math.floor(height));
    }

    var self = this;
    const { emulator, poll } = this.props;
    // Temporary disabled pool way of `getScreenshot`, since emulator sending corrupted screenshots
    // if (poll) {
    //   this.screen = emulator.getScreenshot(request);
    // } else {
    //   this.screen = emulator.streamScreenshot(request);
    // }
    this.screen = emulator.streamScreenshot(request);

    this.screen.on('data', (response) => {
      // Update the image with the one we just received.
      self.setState({
        png: 'data:image/jpeg;base64,' + response.getImage_asB64(),
      });
      if (poll) {
        this.startStream(width, height);
      }
    });
  }

  render() {
    const { deviceWidth, deviceHeight } = this.props;
    const self = this;
    return (
      <div
        style={{
          display: 'block',
          position: 'relative',
          objectFit: 'contain',
          objectPosition: 'center',
          width: deviceWidth,
          height: deviceHeight,
        }}
      >
        <ResizeObserver
          onResize={(rect) => {
            self.setState({ width: rect.width, height: rect.height }, self.startStream);
          }}
        />
        <img src={this.state.png} width="100%" alt={'png-view'} />
      </div>
    );
  }
}
