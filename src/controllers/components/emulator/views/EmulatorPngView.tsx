import React, { Component } from 'react';
import Proto from '../../../proto/emulator_controller_pb.js';
import ResizeObserverComponent from 'react-resize-observer';
import { EmulatorControllerService } from '../../../proto/emulator_web_client.js';
import { ClientReadableStream } from 'grpc-web';

type EmulatorPngViewProps = {
  /** Emulator service used to retrieve screenshots. */
  emulator: EmulatorControllerService;
  /** Streaming Edge node ID */
  edgeNodeId: string;
  /** The width of the component */
  width: number;
  /** True if polling should be used, only set this to true if you are using the gowebrpc proxy. */
  poll?: boolean;
  /** The width of the emulator device */
  deviceWidth?: number;
  /** The height of the emulator device */
  deviceHeight?: number;
};

type EmulatorPngViewState = {
  /** The base64 encoded png image. */
  png: string;
  /** The width of the component */
  width?: number;
  /** The height of the component */
  height?: number;
};

/**
 * A view on the emulator that is generated by streaming a series of screenshots.
 *
 * Note: This is very expensive when running remote, and does not support audio.
 */
export default class EmulatorPngView extends Component<EmulatorPngViewProps> {
  state: EmulatorPngViewState = {
    png: '',
  };

  screen: ClientReadableStream<Proto.Image>;

  componentDidMount() {
    this.startStream();
  }

  componentWillUnmount() {
    if (this.screen) {
      this.screen.cancel();
    }
  }

  startStream() {
    const { width, height } = this.state;
    if (this.screen) {
      this.screen.cancel();
    }
    var request = new Proto.ImageFormat();
    if (width && !isNaN(width) && height && !isNaN(height)) {
      request.setWidth(Math.floor(width));
      request.setHeight(Math.floor(height));
    }

    var self = this;
    const { emulator, poll } = this.props;
    // Temporary disabled pool way of `getScreenshot`, since emulator sending corrupted screenshots
    // if (poll) {
    //   this.screen = emulator.getScreenshot(request);
    // } else {
    //   this.screen = emulator.streamScreenshot(request);
    // }
    this.screen = emulator.streamScreenshot(request);

    this.screen.on('data', (response) => {
      // Update the image with the one we just received.
      self.setState({
        png: 'data:image/jpeg;base64,' + response.getImage_asB64(),
      });
      if (poll) {
        this.startStream();
      }
    });
  }

  render() {
    const { deviceWidth, deviceHeight } = this.props;
    const self = this;
    return (
      <div
        style={{
          display: 'block',
          position: 'relative',
          objectFit: 'contain',
          objectPosition: 'center',
          width: deviceWidth,
          height: deviceHeight,
        }}
      >
        <ResizeObserverComponent
          onResize={(rect) => {
            self.setState({ width: rect.width, height: rect.height }, self.startStream);
          }}
        />
        <img src={this.state.png} width="100%" alt={'png-view'} />
      </div>
    );
  }
}
