// source: waterfall.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.waterfall.Cmd', null, global);
goog.exportSymbol('proto.waterfall.CmdProgress', null, global);
goog.exportSymbol('proto.waterfall.ForwardMessage', null, global);
goog.exportSymbol('proto.waterfall.ForwardMessage.Kind', null, global);
goog.exportSymbol('proto.waterfall.ForwardMessage.Op', null, global);
goog.exportSymbol('proto.waterfall.ForwardSession', null, global);
goog.exportSymbol('proto.waterfall.ForwardedSessions', null, global);
goog.exportSymbol('proto.waterfall.Message', null, global);
goog.exportSymbol('proto.waterfall.PortForwardRequest', null, global);
goog.exportSymbol('proto.waterfall.Transfer', null, global);
goog.exportSymbol('proto.waterfall.VersionMessage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.waterfall.Message = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.waterfall.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.waterfall.Message.displayName = 'proto.waterfall.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.waterfall.Transfer = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.waterfall.Transfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.waterfall.Transfer.displayName = 'proto.waterfall.Transfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.waterfall.Cmd = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.waterfall.Cmd.repeatedFields_, null);
};
goog.inherits(proto.waterfall.Cmd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.waterfall.Cmd.displayName = 'proto.waterfall.Cmd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.waterfall.CmdProgress = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.waterfall.CmdProgress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.waterfall.CmdProgress.displayName = 'proto.waterfall.CmdProgress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.waterfall.ForwardMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.waterfall.ForwardMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.waterfall.ForwardMessage.displayName = 'proto.waterfall.ForwardMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.waterfall.VersionMessage = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.waterfall.VersionMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.waterfall.VersionMessage.displayName = 'proto.waterfall.VersionMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.waterfall.ForwardSession = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.waterfall.ForwardSession, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.waterfall.ForwardSession.displayName = 'proto.waterfall.ForwardSession';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.waterfall.PortForwardRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.waterfall.PortForwardRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.waterfall.PortForwardRequest.displayName = 'proto.waterfall.PortForwardRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.waterfall.ForwardedSessions = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.waterfall.ForwardedSessions.repeatedFields_, null);
};
goog.inherits(proto.waterfall.ForwardedSessions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.waterfall.ForwardedSessions.displayName = 'proto.waterfall.ForwardedSessions';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.waterfall.Message.prototype.toObject = function (opt_includeInstance) {
    return proto.waterfall.Message.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.waterfall.Message} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.waterfall.Message.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        payload: msg.getPayload_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.waterfall.Message}
 */
proto.waterfall.Message.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.waterfall.Message();
  return proto.waterfall.Message.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.waterfall.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.waterfall.Message}
 */
proto.waterfall.Message.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPayload(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.waterfall.Message.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.waterfall.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.waterfall.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.waterfall.Message.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
};

/**
 * optional bytes payload = 1;
 * @return {string}
 */
proto.waterfall.Message.prototype.getPayload = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.waterfall.Message.prototype.getPayload_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPayload()));
};

/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.waterfall.Message.prototype.getPayload_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPayload()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.waterfall.Message} returns this
 */
proto.waterfall.Message.prototype.setPayload = function (value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.waterfall.Transfer.prototype.toObject = function (opt_includeInstance) {
    return proto.waterfall.Transfer.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.waterfall.Transfer} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.waterfall.Transfer.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        path: jspb.Message.getFieldWithDefault(msg, 1, ''),
        payload: msg.getPayload_asB64(),
        success: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
        err: msg.getErr_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.waterfall.Transfer}
 */
proto.waterfall.Transfer.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.waterfall.Transfer();
  return proto.waterfall.Transfer.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.waterfall.Transfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.waterfall.Transfer}
 */
proto.waterfall.Transfer.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setPath(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPayload(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setSuccess(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setErr(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.waterfall.Transfer.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.waterfall.Transfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.waterfall.Transfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.waterfall.Transfer.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getSuccess();
  if (f) {
    writer.writeBool(3, f);
  }
  f = message.getErr_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
};

/**
 * optional string path = 1;
 * @return {string}
 */
proto.waterfall.Transfer.prototype.getPath = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.waterfall.Transfer} returns this
 */
proto.waterfall.Transfer.prototype.setPath = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional bytes payload = 2;
 * @return {string}
 */
proto.waterfall.Transfer.prototype.getPayload = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.waterfall.Transfer.prototype.getPayload_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPayload()));
};

/**
 * optional bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.waterfall.Transfer.prototype.getPayload_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPayload()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.waterfall.Transfer} returns this
 */
proto.waterfall.Transfer.prototype.setPayload = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional bool success = 3;
 * @return {boolean}
 */
proto.waterfall.Transfer.prototype.getSuccess = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};

/**
 * @param {boolean} value
 * @return {!proto.waterfall.Transfer} returns this
 */
proto.waterfall.Transfer.prototype.setSuccess = function (value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};

/**
 * optional bytes err = 4;
 * @return {string}
 */
proto.waterfall.Transfer.prototype.getErr = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * optional bytes err = 4;
 * This is a type-conversion wrapper around `getErr()`
 * @return {string}
 */
proto.waterfall.Transfer.prototype.getErr_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getErr()));
};

/**
 * optional bytes err = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErr()`
 * @return {!Uint8Array}
 */
proto.waterfall.Transfer.prototype.getErr_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getErr()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.waterfall.Transfer} returns this
 */
proto.waterfall.Transfer.prototype.setErr = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.waterfall.Cmd.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.waterfall.Cmd.prototype.toObject = function (opt_includeInstance) {
    return proto.waterfall.Cmd.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.waterfall.Cmd} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.waterfall.Cmd.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        path: jspb.Message.getFieldWithDefault(msg, 1, ''),
        argsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
        dir: jspb.Message.getFieldWithDefault(msg, 3, ''),
        pipein: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
        envMap: (f = msg.getEnvMap()) ? f.toObject(includeInstance, undefined) : [],
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.waterfall.Cmd}
 */
proto.waterfall.Cmd.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.waterfall.Cmd();
  return proto.waterfall.Cmd.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.waterfall.Cmd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.waterfall.Cmd}
 */
proto.waterfall.Cmd.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setPath(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.addArgs(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setDir(value);
        break;
      case 4:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setPipein(value);
        break;
      case 5:
        var value = msg.getEnvMap();
        reader.readMessage(value, function (message, reader) {
          jspb.Map.deserializeBinary(
            message,
            reader,
            jspb.BinaryReader.prototype.readString,
            jspb.BinaryReader.prototype.readString,
            null,
            '',
            ''
          );
        });
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.waterfall.Cmd.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.waterfall.Cmd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.waterfall.Cmd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.waterfall.Cmd.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getArgsList();
  if (f.length > 0) {
    writer.writeRepeatedString(2, f);
  }
  f = message.getDir();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getPipein();
  if (f) {
    writer.writeBool(4, f);
  }
  f = message.getEnvMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};

/**
 * optional string path = 1;
 * @return {string}
 */
proto.waterfall.Cmd.prototype.getPath = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.waterfall.Cmd} returns this
 */
proto.waterfall.Cmd.prototype.setPath = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * repeated string args = 2;
 * @return {!Array<string>}
 */
proto.waterfall.Cmd.prototype.getArgsList = function () {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};

/**
 * @param {!Array<string>} value
 * @return {!proto.waterfall.Cmd} returns this
 */
proto.waterfall.Cmd.prototype.setArgsList = function (value) {
  return jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.waterfall.Cmd} returns this
 */
proto.waterfall.Cmd.prototype.addArgs = function (value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.waterfall.Cmd} returns this
 */
proto.waterfall.Cmd.prototype.clearArgsList = function () {
  return this.setArgsList([]);
};

/**
 * optional string dir = 3;
 * @return {string}
 */
proto.waterfall.Cmd.prototype.getDir = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.waterfall.Cmd} returns this
 */
proto.waterfall.Cmd.prototype.setDir = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional bool pipeIn = 4;
 * @return {boolean}
 */
proto.waterfall.Cmd.prototype.getPipein = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};

/**
 * @param {boolean} value
 * @return {!proto.waterfall.Cmd} returns this
 */
proto.waterfall.Cmd.prototype.setPipein = function (value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};

/**
 * map<string, string> env = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.waterfall.Cmd.prototype.getEnvMap = function (opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (jspb.Message.getMapField(this, 5, opt_noLazyCreate, null));
};

/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.waterfall.Cmd} returns this
 */
proto.waterfall.Cmd.prototype.clearEnvMap = function () {
  this.getEnvMap().clear();
  return this;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.waterfall.CmdProgress.prototype.toObject = function (opt_includeInstance) {
    return proto.waterfall.CmdProgress.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.waterfall.CmdProgress} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.waterfall.CmdProgress.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        cmd: (f = msg.getCmd()) && proto.waterfall.Cmd.toObject(includeInstance, f),
        exitCode: jspb.Message.getFieldWithDefault(msg, 1, 0),
        stdout: msg.getStdout_asB64(),
        stderr: msg.getStderr_asB64(),
        stdin: msg.getStdin_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.waterfall.CmdProgress}
 */
proto.waterfall.CmdProgress.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.waterfall.CmdProgress();
  return proto.waterfall.CmdProgress.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.waterfall.CmdProgress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.waterfall.CmdProgress}
 */
proto.waterfall.CmdProgress.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 5:
        var value = new proto.waterfall.Cmd();
        reader.readMessage(value, proto.waterfall.Cmd.deserializeBinaryFromReader);
        msg.setCmd(value);
        break;
      case 1:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setExitCode(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setStdout(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setStderr(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setStdin(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.waterfall.CmdProgress.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.waterfall.CmdProgress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.waterfall.CmdProgress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.waterfall.CmdProgress.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getCmd();
  if (f != null) {
    writer.writeMessage(5, f, proto.waterfall.Cmd.serializeBinaryToWriter);
  }
  f = message.getExitCode();
  if (f !== 0) {
    writer.writeUint32(1, f);
  }
  f = message.getStdout_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getStderr_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getStdin_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
};

/**
 * optional Cmd cmd = 5;
 * @return {?proto.waterfall.Cmd}
 */
proto.waterfall.CmdProgress.prototype.getCmd = function () {
  return /** @type{?proto.waterfall.Cmd} */ (jspb.Message.getWrapperField(this, proto.waterfall.Cmd, 5));
};

/**
 * @param {?proto.waterfall.Cmd|undefined} value
 * @return {!proto.waterfall.CmdProgress} returns this
 */
proto.waterfall.CmdProgress.prototype.setCmd = function (value) {
  return jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.waterfall.CmdProgress} returns this
 */
proto.waterfall.CmdProgress.prototype.clearCmd = function () {
  return this.setCmd(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.waterfall.CmdProgress.prototype.hasCmd = function () {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * optional uint32 exit_code = 1;
 * @return {number}
 */
proto.waterfall.CmdProgress.prototype.getExitCode = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {number} value
 * @return {!proto.waterfall.CmdProgress} returns this
 */
proto.waterfall.CmdProgress.prototype.setExitCode = function (value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};

/**
 * optional bytes stdout = 2;
 * @return {string}
 */
proto.waterfall.CmdProgress.prototype.getStdout = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * optional bytes stdout = 2;
 * This is a type-conversion wrapper around `getStdout()`
 * @return {string}
 */
proto.waterfall.CmdProgress.prototype.getStdout_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getStdout()));
};

/**
 * optional bytes stdout = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStdout()`
 * @return {!Uint8Array}
 */
proto.waterfall.CmdProgress.prototype.getStdout_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getStdout()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.waterfall.CmdProgress} returns this
 */
proto.waterfall.CmdProgress.prototype.setStdout = function (value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional bytes stderr = 3;
 * @return {string}
 */
proto.waterfall.CmdProgress.prototype.getStderr = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * optional bytes stderr = 3;
 * This is a type-conversion wrapper around `getStderr()`
 * @return {string}
 */
proto.waterfall.CmdProgress.prototype.getStderr_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getStderr()));
};

/**
 * optional bytes stderr = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStderr()`
 * @return {!Uint8Array}
 */
proto.waterfall.CmdProgress.prototype.getStderr_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getStderr()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.waterfall.CmdProgress} returns this
 */
proto.waterfall.CmdProgress.prototype.setStderr = function (value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * optional bytes stdin = 4;
 * @return {string}
 */
proto.waterfall.CmdProgress.prototype.getStdin = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * optional bytes stdin = 4;
 * This is a type-conversion wrapper around `getStdin()`
 * @return {string}
 */
proto.waterfall.CmdProgress.prototype.getStdin_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getStdin()));
};

/**
 * optional bytes stdin = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStdin()`
 * @return {!Uint8Array}
 */
proto.waterfall.CmdProgress.prototype.getStdin_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getStdin()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.waterfall.CmdProgress} returns this
 */
proto.waterfall.CmdProgress.prototype.setStdin = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.waterfall.ForwardMessage.prototype.toObject = function (opt_includeInstance) {
    return proto.waterfall.ForwardMessage.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.waterfall.ForwardMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.waterfall.ForwardMessage.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        kind: jspb.Message.getFieldWithDefault(msg, 1, 0),
        op: jspb.Message.getFieldWithDefault(msg, 2, 0),
        addr: jspb.Message.getFieldWithDefault(msg, 3, ''),
        payload: msg.getPayload_asB64(),
        rebind: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.waterfall.ForwardMessage}
 */
proto.waterfall.ForwardMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.waterfall.ForwardMessage();
  return proto.waterfall.ForwardMessage.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.waterfall.ForwardMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.waterfall.ForwardMessage}
 */
proto.waterfall.ForwardMessage.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.waterfall.ForwardMessage.Kind} */ (reader.readEnum());
        msg.setKind(value);
        break;
      case 2:
        var value = /** @type {!proto.waterfall.ForwardMessage.Op} */ (reader.readEnum());
        msg.setOp(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setAddr(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPayload(value);
        break;
      case 5:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setRebind(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.waterfall.ForwardMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.waterfall.ForwardMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.waterfall.ForwardMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.waterfall.ForwardMessage.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(2, f);
  }
  f = message.getAddr();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
  f = message.getRebind();
  if (f) {
    writer.writeBool(5, f);
  }
};

/**
 * @enum {number}
 */
proto.waterfall.ForwardMessage.Kind = {
  UNSET: 0,
  TCP: 1,
  UDP: 2,
  UNIX: 3,
};

/**
 * @enum {number}
 */
proto.waterfall.ForwardMessage.Op = {
  OPEN: 0,
  FWD: 1,
  CLOSE: 2,
};

/**
 * optional Kind kind = 1;
 * @return {!proto.waterfall.ForwardMessage.Kind}
 */
proto.waterfall.ForwardMessage.prototype.getKind = function () {
  return /** @type {!proto.waterfall.ForwardMessage.Kind} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};

/**
 * @param {!proto.waterfall.ForwardMessage.Kind} value
 * @return {!proto.waterfall.ForwardMessage} returns this
 */
proto.waterfall.ForwardMessage.prototype.setKind = function (value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional Op op = 2;
 * @return {!proto.waterfall.ForwardMessage.Op}
 */
proto.waterfall.ForwardMessage.prototype.getOp = function () {
  return /** @type {!proto.waterfall.ForwardMessage.Op} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/**
 * @param {!proto.waterfall.ForwardMessage.Op} value
 * @return {!proto.waterfall.ForwardMessage} returns this
 */
proto.waterfall.ForwardMessage.prototype.setOp = function (value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};

/**
 * optional string addr = 3;
 * @return {string}
 */
proto.waterfall.ForwardMessage.prototype.getAddr = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.waterfall.ForwardMessage} returns this
 */
proto.waterfall.ForwardMessage.prototype.setAddr = function (value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional bytes payload = 4;
 * @return {string}
 */
proto.waterfall.ForwardMessage.prototype.getPayload = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * optional bytes payload = 4;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.waterfall.ForwardMessage.prototype.getPayload_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPayload()));
};

/**
 * optional bytes payload = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.waterfall.ForwardMessage.prototype.getPayload_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPayload()));
};

/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.waterfall.ForwardMessage} returns this
 */
proto.waterfall.ForwardMessage.prototype.setPayload = function (value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * optional bool rebind = 5;
 * @return {boolean}
 */
proto.waterfall.ForwardMessage.prototype.getRebind = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};

/**
 * @param {boolean} value
 * @return {!proto.waterfall.ForwardMessage} returns this
 */
proto.waterfall.ForwardMessage.prototype.setRebind = function (value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.waterfall.VersionMessage.prototype.toObject = function (opt_includeInstance) {
    return proto.waterfall.VersionMessage.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.waterfall.VersionMessage} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.waterfall.VersionMessage.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        version: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.waterfall.VersionMessage}
 */
proto.waterfall.VersionMessage.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.waterfall.VersionMessage();
  return proto.waterfall.VersionMessage.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.waterfall.VersionMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.waterfall.VersionMessage}
 */
proto.waterfall.VersionMessage.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setVersion(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.waterfall.VersionMessage.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.waterfall.VersionMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.waterfall.VersionMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.waterfall.VersionMessage.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string version = 1;
 * @return {string}
 */
proto.waterfall.VersionMessage.prototype.getVersion = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.waterfall.VersionMessage} returns this
 */
proto.waterfall.VersionMessage.prototype.setVersion = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.waterfall.ForwardSession.prototype.toObject = function (opt_includeInstance) {
    return proto.waterfall.ForwardSession.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.waterfall.ForwardSession} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.waterfall.ForwardSession.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        src: jspb.Message.getFieldWithDefault(msg, 1, ''),
        dst: jspb.Message.getFieldWithDefault(msg, 2, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.waterfall.ForwardSession}
 */
proto.waterfall.ForwardSession.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.waterfall.ForwardSession();
  return proto.waterfall.ForwardSession.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.waterfall.ForwardSession} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.waterfall.ForwardSession}
 */
proto.waterfall.ForwardSession.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setSrc(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setDst(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.waterfall.ForwardSession.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.waterfall.ForwardSession.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.waterfall.ForwardSession} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.waterfall.ForwardSession.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSrc();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getDst();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string src = 1;
 * @return {string}
 */
proto.waterfall.ForwardSession.prototype.getSrc = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.waterfall.ForwardSession} returns this
 */
proto.waterfall.ForwardSession.prototype.setSrc = function (value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string dst = 2;
 * @return {string}
 */
proto.waterfall.ForwardSession.prototype.getDst = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.waterfall.ForwardSession} returns this
 */
proto.waterfall.ForwardSession.prototype.setDst = function (value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.waterfall.PortForwardRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.waterfall.PortForwardRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.waterfall.PortForwardRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.waterfall.PortForwardRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        rebind: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
        session: (f = msg.getSession()) && proto.waterfall.ForwardSession.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.waterfall.PortForwardRequest}
 */
proto.waterfall.PortForwardRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.waterfall.PortForwardRequest();
  return proto.waterfall.PortForwardRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.waterfall.PortForwardRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.waterfall.PortForwardRequest}
 */
proto.waterfall.PortForwardRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setRebind(value);
        break;
      case 4:
        var value = new proto.waterfall.ForwardSession();
        reader.readMessage(value, proto.waterfall.ForwardSession.deserializeBinaryFromReader);
        msg.setSession(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.waterfall.PortForwardRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.waterfall.PortForwardRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.waterfall.PortForwardRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.waterfall.PortForwardRequest.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getRebind();
  if (f) {
    writer.writeBool(3, f);
  }
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(4, f, proto.waterfall.ForwardSession.serializeBinaryToWriter);
  }
};

/**
 * optional bool rebind = 3;
 * @return {boolean}
 */
proto.waterfall.PortForwardRequest.prototype.getRebind = function () {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};

/**
 * @param {boolean} value
 * @return {!proto.waterfall.PortForwardRequest} returns this
 */
proto.waterfall.PortForwardRequest.prototype.setRebind = function (value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};

/**
 * optional ForwardSession session = 4;
 * @return {?proto.waterfall.ForwardSession}
 */
proto.waterfall.PortForwardRequest.prototype.getSession = function () {
  return /** @type{?proto.waterfall.ForwardSession} */ (jspb.Message.getWrapperField(this, proto.waterfall.ForwardSession, 4));
};

/**
 * @param {?proto.waterfall.ForwardSession|undefined} value
 * @return {!proto.waterfall.PortForwardRequest} returns this
 */
proto.waterfall.PortForwardRequest.prototype.setSession = function (value) {
  return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.waterfall.PortForwardRequest} returns this
 */
proto.waterfall.PortForwardRequest.prototype.clearSession = function () {
  return this.setSession(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.waterfall.PortForwardRequest.prototype.hasSession = function () {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.waterfall.ForwardedSessions.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.waterfall.ForwardedSessions.prototype.toObject = function (opt_includeInstance) {
    return proto.waterfall.ForwardedSessions.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.waterfall.ForwardedSessions} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.waterfall.ForwardedSessions.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        sessionsList: jspb.Message.toObjectList(msg.getSessionsList(), proto.waterfall.ForwardSession.toObject, includeInstance),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.waterfall.ForwardedSessions}
 */
proto.waterfall.ForwardedSessions.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.waterfall.ForwardedSessions();
  return proto.waterfall.ForwardedSessions.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.waterfall.ForwardedSessions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.waterfall.ForwardedSessions}
 */
proto.waterfall.ForwardedSessions.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.waterfall.ForwardSession();
        reader.readMessage(value, proto.waterfall.ForwardSession.deserializeBinaryFromReader);
        msg.addSessions(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.waterfall.ForwardedSessions.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.waterfall.ForwardedSessions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.waterfall.ForwardedSessions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.waterfall.ForwardedSessions.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getSessionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.waterfall.ForwardSession.serializeBinaryToWriter);
  }
};

/**
 * repeated ForwardSession sessions = 1;
 * @return {!Array<!proto.waterfall.ForwardSession>}
 */
proto.waterfall.ForwardedSessions.prototype.getSessionsList = function () {
  return /** @type{!Array<!proto.waterfall.ForwardSession>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.waterfall.ForwardSession, 1)
  );
};

/**
 * @param {!Array<!proto.waterfall.ForwardSession>} value
 * @return {!proto.waterfall.ForwardedSessions} returns this
 */
proto.waterfall.ForwardedSessions.prototype.setSessionsList = function (value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.waterfall.ForwardSession=} opt_value
 * @param {number=} opt_index
 * @return {!proto.waterfall.ForwardSession}
 */
proto.waterfall.ForwardedSessions.prototype.addSessions = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.waterfall.ForwardSession, opt_index);
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.waterfall.ForwardedSessions} returns this
 */
proto.waterfall.ForwardedSessions.prototype.clearSessionsList = function () {
  return this.setSessionsList([]);
};

goog.object.extend(exports, proto.waterfall);
