"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var Proto = _interopRequireWildcard(require("../../../proto/emulator_controller_pb"));

var _reactResizeObserver = _interopRequireDefault(require("react-resize-observer"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * A view on the emulator that is generated by streaming a series of screenshots.
 *
 * Note: This is very expensive when running remote, and does not support audio.
 */
class EmulatorPngView extends _react.Component {
  constructor() {
    super(...arguments);
    this.state = {
      png: '',
      width: null,
      height: null
    };
  }

  componentDidMount() {
    this.startStream();
  }

  componentWillUnmount() {
    if (this.screen) {
      this.screen.cancel();
    }
  }

  startStream() {
    const {
      width,
      height
    } = this.state;

    if (this.screen) {
      this.screen.cancel();
    }

    var request = new Proto.ImageFormat();

    if (!isNaN(width)) {
      request.setWidth(Math.floor(width));
      request.setHeight(Math.floor(height));
    }

    var self = this;
    const {
      emulator,
      poll
    } = this.props; // Temporary disabled pool way of `getScreenshot`, since emulator sending corrupted screenshots
    // if (poll) {
    //   this.screen = emulator.getScreenshot(request);
    // } else {
    //   this.screen = emulator.streamScreenshot(request);
    // }

    this.screen = emulator.streamScreenshot(request);
    this.screen.on('data', response => {
      // Update the image with the one we just received.
      self.setState({
        png: 'data:image/jpeg;base64,' + response.getImage_asB64()
      });

      if (poll) {
        this.startStream(width, height);
      }
    });
  }

  render() {
    const {
      deviceWidth,
      deviceHeight
    } = this.props;
    const self = this;
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        display: 'block',
        position: 'relative',
        objectFit: 'contain',
        objectPosition: 'center',
        width: deviceWidth,
        height: deviceHeight
      }
    }, /*#__PURE__*/_react.default.createElement(_reactResizeObserver.default, {
      onResize: rect => {
        self.setState({
          width: rect.width,
          height: rect.height
        }, self.startStream);
      }
    }), /*#__PURE__*/_react.default.createElement("img", {
      src: this.state.png,
      width: "100%",
      alt: 'png-view'
    }));
  }

}

exports.default = EmulatorPngView;
EmulatorPngView.propTypes = {
  /** Emulator service used to retrieve screenshots. */
  emulator: _propTypes.default.object,

  /** Streaming Edge node ID */
  edgeNodeId: _propTypes.default.string.isRequired,

  /** Event Logger */
  logger: _propTypes.default.object.isRequired,

  /** The width of the component */
  width: _propTypes.default.number,

  /** True if polling should be used, only set this to true if you are using the gowebrpc proxy. */
  poll: _propTypes.default.bool,

  /** The width of the emulator device */
  deviceWidth: _propTypes.default.number,

  /** The height of the emulator device */
  deviceHeight: _propTypes.default.number
};