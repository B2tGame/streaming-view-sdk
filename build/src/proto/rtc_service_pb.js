"use strict";

/* eslint-disable */

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');

var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');

goog.exportSymbol('proto.android.emulation.control.JsepMsg', null, global);
goog.exportSymbol('proto.android.emulation.control.RtcId', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */

proto.android.emulation.control.RtcId = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.android.emulation.control.RtcId, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.android.emulation.control.RtcId.displayName = 'proto.android.emulation.control.RtcId';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.android.emulation.control.RtcId.prototype.toObject = function (opt_includeInstance) {
    return proto.android.emulation.control.RtcId.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.android.emulation.control.RtcId} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.android.emulation.control.RtcId.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      guid: jspb.Message.getFieldWithDefault(msg, 1, '')
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.RtcId}
 */


proto.android.emulation.control.RtcId.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.android.emulation.control.RtcId();
  return proto.android.emulation.control.RtcId.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.RtcId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.RtcId}
 */


proto.android.emulation.control.RtcId.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setGuid(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.android.emulation.control.RtcId.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.android.emulation.control.RtcId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.RtcId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.android.emulation.control.RtcId.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getGuid();

  if (f.length > 0) {
    writer.writeString(1, f);
  }
};
/**
 * optional string guid = 1;
 * @return {string}
 */


proto.android.emulation.control.RtcId.prototype.getGuid = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 1, '')
  );
};
/** @param {string} value */


proto.android.emulation.control.RtcId.prototype.setGuid = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */


proto.android.emulation.control.JsepMsg = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};

goog.inherits(proto.android.emulation.control.JsepMsg, jspb.Message);

if (goog.DEBUG && !COMPILED) {
  proto.android.emulation.control.JsepMsg.displayName = 'proto.android.emulation.control.JsepMsg';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.android.emulation.control.JsepMsg.prototype.toObject = function (opt_includeInstance) {
    return proto.android.emulation.control.JsepMsg.toObject(opt_includeInstance, this);
  };
  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.android.emulation.control.JsepMsg} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */


  proto.android.emulation.control.JsepMsg.toObject = function (includeInstance, msg) {
    var f,
        obj = {
      id: (f = msg.getId()) && proto.android.emulation.control.RtcId.toObject(includeInstance, f),
      message: jspb.Message.getFieldWithDefault(msg, 2, '')
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }

    return obj;
  };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.JsepMsg}
 */


proto.android.emulation.control.JsepMsg.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.android.emulation.control.JsepMsg();
  return proto.android.emulation.control.JsepMsg.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.JsepMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.JsepMsg}
 */


proto.android.emulation.control.JsepMsg.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }

    var field = reader.getFieldNumber();

    switch (field) {
      case 1:
        var value = new proto.android.emulation.control.RtcId();
        reader.readMessage(value, proto.android.emulation.control.RtcId.deserializeBinaryFromReader);
        msg.setId(value);
        break;

      case 2:
        var value =
        /** @type {string} */
        reader.readString();
        msg.setMessage(value);
        break;

      default:
        reader.skipField();
        break;
    }
  }

  return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */


proto.android.emulation.control.JsepMsg.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.android.emulation.control.JsepMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.JsepMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */


proto.android.emulation.control.JsepMsg.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getId();

  if (f != null) {
    writer.writeMessage(1, f, proto.android.emulation.control.RtcId.serializeBinaryToWriter);
  }

  f = message.getMessage();

  if (f.length > 0) {
    writer.writeString(2, f);
  }
};
/**
 * optional RtcId id = 1;
 * @return {?proto.android.emulation.control.RtcId}
 */


proto.android.emulation.control.JsepMsg.prototype.getId = function () {
  return (
    /** @type{?proto.android.emulation.control.RtcId} */
    jspb.Message.getWrapperField(this, proto.android.emulation.control.RtcId, 1)
  );
};
/** @param {?proto.android.emulation.control.RtcId|undefined} value */


proto.android.emulation.control.JsepMsg.prototype.setId = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.android.emulation.control.JsepMsg.prototype.clearId = function () {
  this.setId(undefined);
};
/**
 * Returns whether this field is set.
 * @return {!boolean}
 */


proto.android.emulation.control.JsepMsg.prototype.hasId = function () {
  return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string message = 2;
 * @return {string}
 */


proto.android.emulation.control.JsepMsg.prototype.getMessage = function () {
  return (
    /** @type {string} */
    jspb.Message.getFieldWithDefault(this, 2, '')
  );
};
/** @param {string} value */


proto.android.emulation.control.JsepMsg.prototype.setMessage = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

goog.object.extend(exports, proto.android.emulation.control);