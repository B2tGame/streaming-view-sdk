/* eslint-disable */
// source: emulator_controller.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.android.emulation.control.BatteryState', null, global);
goog.exportSymbol('proto.android.emulation.control.BatteryState.BatteryCharger', null, global);
goog.exportSymbol('proto.android.emulation.control.BatteryState.BatteryHealth', null, global);
goog.exportSymbol('proto.android.emulation.control.BatteryState.BatteryStatus', null, global);
goog.exportSymbol('proto.android.emulation.control.EmulatorStatus', null, global);
goog.exportSymbol('proto.android.emulation.control.Entry', null, global);
goog.exportSymbol('proto.android.emulation.control.EntryList', null, global);
goog.exportSymbol('proto.android.emulation.control.FingerprintEvent', null, global);
goog.exportSymbol('proto.android.emulation.control.GpsState', null, global);
goog.exportSymbol('proto.android.emulation.control.Image', null, global);
goog.exportSymbol('proto.android.emulation.control.ImageFormat', null, global);
goog.exportSymbol('proto.android.emulation.control.ImageFormat.ImgFormat', null, global);
goog.exportSymbol('proto.android.emulation.control.ImageStream', null, global);
goog.exportSymbol('proto.android.emulation.control.JsepMsg', null, global);
goog.exportSymbol('proto.android.emulation.control.KeyboardEvent', null, global);
goog.exportSymbol('proto.android.emulation.control.KeyboardEvent.KeyCodeType', null, global);
goog.exportSymbol('proto.android.emulation.control.KeyboardEvent.KeyEventType', null, global);
goog.exportSymbol('proto.android.emulation.control.LogMessage', null, global);
goog.exportSymbol('proto.android.emulation.control.LogMessage.LogType', null, global);
goog.exportSymbol('proto.android.emulation.control.LogcatEntry', null, global);
goog.exportSymbol('proto.android.emulation.control.LogcatEntry.LogLevel', null, global);
goog.exportSymbol('proto.android.emulation.control.MouseEvent', null, global);
goog.exportSymbol('proto.android.emulation.control.RotaryEvent', null, global);
goog.exportSymbol('proto.android.emulation.control.Rotation', null, global);
goog.exportSymbol('proto.android.emulation.control.Rotation.SkinRotation', null, global);
goog.exportSymbol('proto.android.emulation.control.RtcId', null, global);
goog.exportSymbol('proto.android.emulation.control.TelephoneOperation', null, global);
goog.exportSymbol('proto.android.emulation.control.TelephoneOperation.Operation', null, global);
goog.exportSymbol('proto.android.emulation.control.TelephoneResponse', null, global);
goog.exportSymbol('proto.android.emulation.control.TelephoneResponse.Response', null, global);
goog.exportSymbol('proto.android.emulation.control.Touch', null, global);
goog.exportSymbol('proto.android.emulation.control.TouchEvent', null, global);
goog.exportSymbol('proto.android.emulation.control.VmConfiguration', null, global);
goog.exportSymbol('proto.android.emulation.control.VmConfiguration.VmHypervisorType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.RtcId = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.RtcId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.RtcId.displayName = 'proto.android.emulation.control.RtcId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.JsepMsg = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.JsepMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.JsepMsg.displayName = 'proto.android.emulation.control.JsepMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.LogMessage = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, proto.android.emulation.control.LogMessage.repeatedFields_, null);
};
goog.inherits(proto.android.emulation.control.LogMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.LogMessage.displayName = 'proto.android.emulation.control.LogMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.LogcatEntry = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.LogcatEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.LogcatEntry.displayName = 'proto.android.emulation.control.LogcatEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.VmConfiguration = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.VmConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.VmConfiguration.displayName = 'proto.android.emulation.control.VmConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.RotaryEvent = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.RotaryEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.RotaryEvent.displayName = 'proto.android.emulation.control.RotaryEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.Touch = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.Touch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.Touch.displayName = 'proto.android.emulation.control.Touch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.TouchEvent = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, proto.android.emulation.control.TouchEvent.repeatedFields_, null);
};
goog.inherits(proto.android.emulation.control.TouchEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.TouchEvent.displayName = 'proto.android.emulation.control.TouchEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.MouseEvent = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.MouseEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.MouseEvent.displayName = 'proto.android.emulation.control.MouseEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.KeyboardEvent = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.KeyboardEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.KeyboardEvent.displayName = 'proto.android.emulation.control.KeyboardEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.FingerprintEvent = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.FingerprintEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.FingerprintEvent.displayName = 'proto.android.emulation.control.FingerprintEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.GpsState = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.GpsState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.GpsState.displayName = 'proto.android.emulation.control.GpsState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.BatteryState = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.BatteryState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.BatteryState.displayName = 'proto.android.emulation.control.BatteryState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.ImageStream = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.ImageStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.ImageStream.displayName = 'proto.android.emulation.control.ImageStream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.ImageFormat = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.ImageFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.ImageFormat.displayName = 'proto.android.emulation.control.ImageFormat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.Image = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.Image.displayName = 'proto.android.emulation.control.Image';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.Rotation = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.Rotation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.Rotation.displayName = 'proto.android.emulation.control.Rotation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.TelephoneOperation = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.TelephoneOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.TelephoneOperation.displayName = 'proto.android.emulation.control.TelephoneOperation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.TelephoneResponse = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.TelephoneResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.TelephoneResponse.displayName = 'proto.android.emulation.control.TelephoneResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.Entry = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.Entry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.Entry.displayName = 'proto.android.emulation.control.Entry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.EntryList = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, proto.android.emulation.control.EntryList.repeatedFields_, null);
};
goog.inherits(proto.android.emulation.control.EntryList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.EntryList.displayName = 'proto.android.emulation.control.EntryList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.EmulatorStatus = function (opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.EmulatorStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	/**
	 * @public
	 * @override
	 */
	proto.android.emulation.control.EmulatorStatus.displayName = 'proto.android.emulation.control.EmulatorStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.RtcId.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.RtcId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.RtcId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.RtcId.toObject = function (includeInstance, msg) {
		var f, obj = {
			guid: jspb.Message.getFieldWithDefault(msg, 1, "")
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.RtcId}
 */
proto.android.emulation.control.RtcId.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.RtcId;
	return proto.android.emulation.control.RtcId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.RtcId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.RtcId}
 */
proto.android.emulation.control.RtcId.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setGuid(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.RtcId.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.RtcId.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.RtcId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.RtcId.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getGuid();
	if (f.length > 0) {
		writer.writeString(
			1,
			f
		);
	}
};


/**
 * optional string guid = 1;
 * @return {string}
 */
proto.android.emulation.control.RtcId.prototype.getGuid = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.android.emulation.control.RtcId} returns this
 */
proto.android.emulation.control.RtcId.prototype.setGuid = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.JsepMsg.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.JsepMsg.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.JsepMsg} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.JsepMsg.toObject = function (includeInstance, msg) {
		var f, obj = {
			id: (f = msg.getId()) && proto.android.emulation.control.RtcId.toObject(includeInstance, f),
			message: jspb.Message.getFieldWithDefault(msg, 2, "")
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.JsepMsg}
 */
proto.android.emulation.control.JsepMsg.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.JsepMsg;
	return proto.android.emulation.control.JsepMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.JsepMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.JsepMsg}
 */
proto.android.emulation.control.JsepMsg.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.android.emulation.control.RtcId;
				reader.readMessage(value, proto.android.emulation.control.RtcId.deserializeBinaryFromReader);
				msg.setId(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setMessage(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.JsepMsg.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.JsepMsg.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.JsepMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.JsepMsg.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getId();
	if (f != null) {
		writer.writeMessage(
			1,
			f,
			proto.android.emulation.control.RtcId.serializeBinaryToWriter
		);
	}
	f = message.getMessage();
	if (f.length > 0) {
		writer.writeString(
			2,
			f
		);
	}
};


/**
 * optional RtcId id = 1;
 * @return {?proto.android.emulation.control.RtcId}
 */
proto.android.emulation.control.JsepMsg.prototype.getId = function () {
	return /** @type{?proto.android.emulation.control.RtcId} */ (
		jspb.Message.getWrapperField(this, proto.android.emulation.control.RtcId, 1));
};


/**
 * @param {?proto.android.emulation.control.RtcId|undefined} value
 * @return {!proto.android.emulation.control.JsepMsg} returns this
 */
proto.android.emulation.control.JsepMsg.prototype.setId = function (value) {
	return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.android.emulation.control.JsepMsg} returns this
 */
proto.android.emulation.control.JsepMsg.prototype.clearId = function () {
	return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.android.emulation.control.JsepMsg.prototype.hasId = function () {
	return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.android.emulation.control.JsepMsg.prototype.getMessage = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.android.emulation.control.JsepMsg} returns this
 */
proto.android.emulation.control.JsepMsg.prototype.setMessage = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.android.emulation.control.LogMessage.repeatedFields_ = [5];


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.LogMessage.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.LogMessage.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.LogMessage} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.LogMessage.toObject = function (includeInstance, msg) {
		var f, obj = {
			contents: jspb.Message.getFieldWithDefault(msg, 1, ""),
			start: jspb.Message.getFieldWithDefault(msg, 2, 0),
			next: jspb.Message.getFieldWithDefault(msg, 3, 0),
			sort: jspb.Message.getFieldWithDefault(msg, 4, 0),
			entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
				proto.android.emulation.control.LogcatEntry.toObject, includeInstance)
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.LogMessage}
 */
proto.android.emulation.control.LogMessage.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.LogMessage;
	return proto.android.emulation.control.LogMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.LogMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.LogMessage}
 */
proto.android.emulation.control.LogMessage.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setContents(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setStart(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setNext(value);
				break;
			case 4:
				var value = /** @type {!proto.android.emulation.control.LogMessage.LogType} */ (reader.readEnum());
				msg.setSort(value);
				break;
			case 5:
				var value = new proto.android.emulation.control.LogcatEntry;
				reader.readMessage(value, proto.android.emulation.control.LogcatEntry.deserializeBinaryFromReader);
				msg.addEntries(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.LogMessage.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.LogMessage.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.LogMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.LogMessage.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getContents();
	if (f.length > 0) {
		writer.writeString(
			1,
			f
		);
	}
	f = message.getStart();
	if (f !== 0) {
		writer.writeInt64(
			2,
			f
		);
	}
	f = message.getNext();
	if (f !== 0) {
		writer.writeInt64(
			3,
			f
		);
	}
	f = message.getSort();
	if (f !== 0.0) {
		writer.writeEnum(
			4,
			f
		);
	}
	f = message.getEntriesList();
	if (f.length > 0) {
		writer.writeRepeatedMessage(
			5,
			f,
			proto.android.emulation.control.LogcatEntry.serializeBinaryToWriter
		);
	}
};


/**
 * @enum {number}
 */
proto.android.emulation.control.LogMessage.LogType = {
	TEXT: 0,
	PARSED: 1
};

/**
 * optional string contents = 1;
 * @return {string}
 */
proto.android.emulation.control.LogMessage.prototype.getContents = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.android.emulation.control.LogMessage} returns this
 */
proto.android.emulation.control.LogMessage.prototype.setContents = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 start = 2;
 * @return {number}
 */
proto.android.emulation.control.LogMessage.prototype.getStart = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.LogMessage} returns this
 */
proto.android.emulation.control.LogMessage.prototype.setStart = function (value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 next = 3;
 * @return {number}
 */
proto.android.emulation.control.LogMessage.prototype.getNext = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.LogMessage} returns this
 */
proto.android.emulation.control.LogMessage.prototype.setNext = function (value) {
	return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional LogType sort = 4;
 * @return {!proto.android.emulation.control.LogMessage.LogType}
 */
proto.android.emulation.control.LogMessage.prototype.getSort = function () {
	return /** @type {!proto.android.emulation.control.LogMessage.LogType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.android.emulation.control.LogMessage.LogType} value
 * @return {!proto.android.emulation.control.LogMessage} returns this
 */
proto.android.emulation.control.LogMessage.prototype.setSort = function (value) {
	return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * repeated LogcatEntry entries = 5;
 * @return {!Array<!proto.android.emulation.control.LogcatEntry>}
 */
proto.android.emulation.control.LogMessage.prototype.getEntriesList = function () {
	return /** @type{!Array<!proto.android.emulation.control.LogcatEntry>} */ (
		jspb.Message.getRepeatedWrapperField(this, proto.android.emulation.control.LogcatEntry, 5));
};


/**
 * @param {!Array<!proto.android.emulation.control.LogcatEntry>} value
 * @return {!proto.android.emulation.control.LogMessage} returns this
 */
proto.android.emulation.control.LogMessage.prototype.setEntriesList = function (value) {
	return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.android.emulation.control.LogcatEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.android.emulation.control.LogcatEntry}
 */
proto.android.emulation.control.LogMessage.prototype.addEntries = function (opt_value, opt_index) {
	return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.android.emulation.control.LogcatEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.android.emulation.control.LogMessage} returns this
 */
proto.android.emulation.control.LogMessage.prototype.clearEntriesList = function () {
	return this.setEntriesList([]);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.LogcatEntry.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.LogcatEntry.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.LogcatEntry} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.LogcatEntry.toObject = function (includeInstance, msg) {
		var f, obj = {
			timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
			pid: jspb.Message.getFieldWithDefault(msg, 2, 0),
			tid: jspb.Message.getFieldWithDefault(msg, 3, 0),
			level: jspb.Message.getFieldWithDefault(msg, 4, 0),
			tag: jspb.Message.getFieldWithDefault(msg, 5, ""),
			msg: jspb.Message.getFieldWithDefault(msg, 6, "")
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.LogcatEntry}
 */
proto.android.emulation.control.LogcatEntry.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.LogcatEntry;
	return proto.android.emulation.control.LogcatEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.LogcatEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.LogcatEntry}
 */
proto.android.emulation.control.LogcatEntry.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readUint64());
				msg.setTimestamp(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readUint32());
				msg.setPid(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readUint32());
				msg.setTid(value);
				break;
			case 4:
				var value = /** @type {!proto.android.emulation.control.LogcatEntry.LogLevel} */ (reader.readEnum());
				msg.setLevel(value);
				break;
			case 5:
				var value = /** @type {string} */ (reader.readString());
				msg.setTag(value);
				break;
			case 6:
				var value = /** @type {string} */ (reader.readString());
				msg.setMsg(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.LogcatEntry.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.LogcatEntry.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.LogcatEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.LogcatEntry.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getTimestamp();
	if (f !== 0) {
		writer.writeUint64(
			1,
			f
		);
	}
	f = message.getPid();
	if (f !== 0) {
		writer.writeUint32(
			2,
			f
		);
	}
	f = message.getTid();
	if (f !== 0) {
		writer.writeUint32(
			3,
			f
		);
	}
	f = message.getLevel();
	if (f !== 0.0) {
		writer.writeEnum(
			4,
			f
		);
	}
	f = message.getTag();
	if (f.length > 0) {
		writer.writeString(
			5,
			f
		);
	}
	f = message.getMsg();
	if (f.length > 0) {
		writer.writeString(
			6,
			f
		);
	}
};


/**
 * @enum {number}
 */
proto.android.emulation.control.LogcatEntry.LogLevel = {
	UNKNOWN: 0,
	DEFAULT: 1,
	VERBOSE: 2,
	DEBUG: 3,
	INFO: 4,
	WARN: 5,
	ERROR: 6,
	FATAL: 7,
	SILENT: 8
};

/**
 * optional uint64 timestamp = 1;
 * @return {number}
 */
proto.android.emulation.control.LogcatEntry.prototype.getTimestamp = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.LogcatEntry} returns this
 */
proto.android.emulation.control.LogcatEntry.prototype.setTimestamp = function (value) {
	return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 pid = 2;
 * @return {number}
 */
proto.android.emulation.control.LogcatEntry.prototype.getPid = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.LogcatEntry} returns this
 */
proto.android.emulation.control.LogcatEntry.prototype.setPid = function (value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 tid = 3;
 * @return {number}
 */
proto.android.emulation.control.LogcatEntry.prototype.getTid = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.LogcatEntry} returns this
 */
proto.android.emulation.control.LogcatEntry.prototype.setTid = function (value) {
	return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional LogLevel level = 4;
 * @return {!proto.android.emulation.control.LogcatEntry.LogLevel}
 */
proto.android.emulation.control.LogcatEntry.prototype.getLevel = function () {
	return /** @type {!proto.android.emulation.control.LogcatEntry.LogLevel} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.android.emulation.control.LogcatEntry.LogLevel} value
 * @return {!proto.android.emulation.control.LogcatEntry} returns this
 */
proto.android.emulation.control.LogcatEntry.prototype.setLevel = function (value) {
	return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string tag = 5;
 * @return {string}
 */
proto.android.emulation.control.LogcatEntry.prototype.getTag = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.android.emulation.control.LogcatEntry} returns this
 */
proto.android.emulation.control.LogcatEntry.prototype.setTag = function (value) {
	return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string msg = 6;
 * @return {string}
 */
proto.android.emulation.control.LogcatEntry.prototype.getMsg = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.android.emulation.control.LogcatEntry} returns this
 */
proto.android.emulation.control.LogcatEntry.prototype.setMsg = function (value) {
	return jspb.Message.setProto3StringField(this, 6, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.VmConfiguration.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.VmConfiguration.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.VmConfiguration} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.VmConfiguration.toObject = function (includeInstance, msg) {
		var f, obj = {
			hypervisortype: jspb.Message.getFieldWithDefault(msg, 1, 0),
			numberofcpucores: jspb.Message.getFieldWithDefault(msg, 2, 0),
			ramsizebytes: jspb.Message.getFieldWithDefault(msg, 3, 0)
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.VmConfiguration}
 */
proto.android.emulation.control.VmConfiguration.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.VmConfiguration;
	return proto.android.emulation.control.VmConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.VmConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.VmConfiguration}
 */
proto.android.emulation.control.VmConfiguration.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.android.emulation.control.VmConfiguration.VmHypervisorType} */ (reader.readEnum());
				msg.setHypervisortype(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setNumberofcpucores(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setRamsizebytes(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.VmConfiguration.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.VmConfiguration.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.VmConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.VmConfiguration.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getHypervisortype();
	if (f !== 0.0) {
		writer.writeEnum(
			1,
			f
		);
	}
	f = message.getNumberofcpucores();
	if (f !== 0) {
		writer.writeInt32(
			2,
			f
		);
	}
	f = message.getRamsizebytes();
	if (f !== 0) {
		writer.writeInt64(
			3,
			f
		);
	}
};


/**
 * @enum {number}
 */
proto.android.emulation.control.VmConfiguration.VmHypervisorType = {
	HV_UNKNOWN: 0,
	HV_NONE: 1,
	HV_KVM: 2,
	HV_HAXM: 3,
	HV_HVF: 4,
	HV_WHPX: 5,
	HV_GVM: 6
};

/**
 * optional VmHypervisorType hypervisorType = 1;
 * @return {!proto.android.emulation.control.VmConfiguration.VmHypervisorType}
 */
proto.android.emulation.control.VmConfiguration.prototype.getHypervisortype = function () {
	return /** @type {!proto.android.emulation.control.VmConfiguration.VmHypervisorType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.android.emulation.control.VmConfiguration.VmHypervisorType} value
 * @return {!proto.android.emulation.control.VmConfiguration} returns this
 */
proto.android.emulation.control.VmConfiguration.prototype.setHypervisortype = function (value) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 numberOfCpuCores = 2;
 * @return {number}
 */
proto.android.emulation.control.VmConfiguration.prototype.getNumberofcpucores = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.VmConfiguration} returns this
 */
proto.android.emulation.control.VmConfiguration.prototype.setNumberofcpucores = function (value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 ramSizeBytes = 3;
 * @return {number}
 */
proto.android.emulation.control.VmConfiguration.prototype.getRamsizebytes = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.VmConfiguration} returns this
 */
proto.android.emulation.control.VmConfiguration.prototype.setRamsizebytes = function (value) {
	return jspb.Message.setProto3IntField(this, 3, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.RotaryEvent.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.RotaryEvent.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.RotaryEvent} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.RotaryEvent.toObject = function (includeInstance, msg) {
		var f, obj = {
			delta: jspb.Message.getFieldWithDefault(msg, 1, 0)
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.RotaryEvent}
 */
proto.android.emulation.control.RotaryEvent.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.RotaryEvent;
	return proto.android.emulation.control.RotaryEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.RotaryEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.RotaryEvent}
 */
proto.android.emulation.control.RotaryEvent.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setDelta(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.RotaryEvent.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.RotaryEvent.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.RotaryEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.RotaryEvent.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getDelta();
	if (f !== 0) {
		writer.writeInt32(
			1,
			f
		);
	}
};


/**
 * optional int32 delta = 1;
 * @return {number}
 */
proto.android.emulation.control.RotaryEvent.prototype.getDelta = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.RotaryEvent} returns this
 */
proto.android.emulation.control.RotaryEvent.prototype.setDelta = function (value) {
	return jspb.Message.setProto3IntField(this, 1, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.Touch.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.Touch.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.Touch} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.Touch.toObject = function (includeInstance, msg) {
		var f, obj = {
			x: jspb.Message.getFieldWithDefault(msg, 1, 0),
			y: jspb.Message.getFieldWithDefault(msg, 2, 0),
			identifier: jspb.Message.getFieldWithDefault(msg, 3, 0),
			pressure: jspb.Message.getFieldWithDefault(msg, 4, 0),
			touchMajor: jspb.Message.getFieldWithDefault(msg, 5, 0),
			touchMinor: jspb.Message.getFieldWithDefault(msg, 6, 0)
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.Touch}
 */
proto.android.emulation.control.Touch.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.Touch;
	return proto.android.emulation.control.Touch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.Touch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.Touch}
 */
proto.android.emulation.control.Touch.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setX(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setY(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setIdentifier(value);
				break;
			case 4:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setPressure(value);
				break;
			case 5:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setTouchMajor(value);
				break;
			case 6:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setTouchMinor(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.Touch.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.Touch.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.Touch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.Touch.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getX();
	if (f !== 0) {
		writer.writeInt32(
			1,
			f
		);
	}
	f = message.getY();
	if (f !== 0) {
		writer.writeInt32(
			2,
			f
		);
	}
	f = message.getIdentifier();
	if (f !== 0) {
		writer.writeInt32(
			3,
			f
		);
	}
	f = message.getPressure();
	if (f !== 0) {
		writer.writeInt32(
			4,
			f
		);
	}
	f = message.getTouchMajor();
	if (f !== 0) {
		writer.writeInt32(
			5,
			f
		);
	}
	f = message.getTouchMinor();
	if (f !== 0) {
		writer.writeInt32(
			6,
			f
		);
	}
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.android.emulation.control.Touch.prototype.getX = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.Touch} returns this
 */
proto.android.emulation.control.Touch.prototype.setX = function (value) {
	return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.android.emulation.control.Touch.prototype.getY = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.Touch} returns this
 */
proto.android.emulation.control.Touch.prototype.setY = function (value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 identifier = 3;
 * @return {number}
 */
proto.android.emulation.control.Touch.prototype.getIdentifier = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.Touch} returns this
 */
proto.android.emulation.control.Touch.prototype.setIdentifier = function (value) {
	return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 pressure = 4;
 * @return {number}
 */
proto.android.emulation.control.Touch.prototype.getPressure = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.Touch} returns this
 */
proto.android.emulation.control.Touch.prototype.setPressure = function (value) {
	return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 touch_major = 5;
 * @return {number}
 */
proto.android.emulation.control.Touch.prototype.getTouchMajor = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.Touch} returns this
 */
proto.android.emulation.control.Touch.prototype.setTouchMajor = function (value) {
	return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 touch_minor = 6;
 * @return {number}
 */
proto.android.emulation.control.Touch.prototype.getTouchMinor = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.Touch} returns this
 */
proto.android.emulation.control.Touch.prototype.setTouchMinor = function (value) {
	return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.android.emulation.control.TouchEvent.repeatedFields_ = [1];


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.TouchEvent.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.TouchEvent.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.TouchEvent} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.TouchEvent.toObject = function (includeInstance, msg) {
		var f, obj = {
			touchesList: jspb.Message.toObjectList(msg.getTouchesList(),
				proto.android.emulation.control.Touch.toObject, includeInstance),
			device: jspb.Message.getFieldWithDefault(msg, 2, 0)
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.TouchEvent}
 */
proto.android.emulation.control.TouchEvent.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.TouchEvent;
	return proto.android.emulation.control.TouchEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.TouchEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.TouchEvent}
 */
proto.android.emulation.control.TouchEvent.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.android.emulation.control.Touch;
				reader.readMessage(value, proto.android.emulation.control.Touch.deserializeBinaryFromReader);
				msg.addTouches(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setDevice(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.TouchEvent.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.TouchEvent.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.TouchEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.TouchEvent.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getTouchesList();
	if (f.length > 0) {
		writer.writeRepeatedMessage(
			1,
			f,
			proto.android.emulation.control.Touch.serializeBinaryToWriter
		);
	}
	f = message.getDevice();
	if (f !== 0) {
		writer.writeInt32(
			2,
			f
		);
	}
};


/**
 * repeated Touch touches = 1;
 * @return {!Array<!proto.android.emulation.control.Touch>}
 */
proto.android.emulation.control.TouchEvent.prototype.getTouchesList = function () {
	return /** @type{!Array<!proto.android.emulation.control.Touch>} */ (
		jspb.Message.getRepeatedWrapperField(this, proto.android.emulation.control.Touch, 1));
};


/**
 * @param {!Array<!proto.android.emulation.control.Touch>} value
 * @return {!proto.android.emulation.control.TouchEvent} returns this
 */
proto.android.emulation.control.TouchEvent.prototype.setTouchesList = function (value) {
	return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.android.emulation.control.Touch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.android.emulation.control.Touch}
 */
proto.android.emulation.control.TouchEvent.prototype.addTouches = function (opt_value, opt_index) {
	return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.android.emulation.control.Touch, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.android.emulation.control.TouchEvent} returns this
 */
proto.android.emulation.control.TouchEvent.prototype.clearTouchesList = function () {
	return this.setTouchesList([]);
};


/**
 * optional int32 device = 2;
 * @return {number}
 */
proto.android.emulation.control.TouchEvent.prototype.getDevice = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.TouchEvent} returns this
 */
proto.android.emulation.control.TouchEvent.prototype.setDevice = function (value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.MouseEvent.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.MouseEvent.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.MouseEvent} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.MouseEvent.toObject = function (includeInstance, msg) {
		var f, obj = {
			x: jspb.Message.getFieldWithDefault(msg, 1, 0),
			y: jspb.Message.getFieldWithDefault(msg, 2, 0),
			buttons: jspb.Message.getFieldWithDefault(msg, 3, 0),
			device: jspb.Message.getFieldWithDefault(msg, 4, 0)
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.MouseEvent}
 */
proto.android.emulation.control.MouseEvent.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.MouseEvent;
	return proto.android.emulation.control.MouseEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.MouseEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.MouseEvent}
 */
proto.android.emulation.control.MouseEvent.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setX(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setY(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setButtons(value);
				break;
			case 4:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setDevice(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.MouseEvent.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.MouseEvent.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.MouseEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.MouseEvent.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getX();
	if (f !== 0) {
		writer.writeInt32(
			1,
			f
		);
	}
	f = message.getY();
	if (f !== 0) {
		writer.writeInt32(
			2,
			f
		);
	}
	f = message.getButtons();
	if (f !== 0) {
		writer.writeInt32(
			3,
			f
		);
	}
	f = message.getDevice();
	if (f !== 0) {
		writer.writeInt32(
			4,
			f
		);
	}
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.android.emulation.control.MouseEvent.prototype.getX = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.MouseEvent} returns this
 */
proto.android.emulation.control.MouseEvent.prototype.setX = function (value) {
	return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.android.emulation.control.MouseEvent.prototype.getY = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.MouseEvent} returns this
 */
proto.android.emulation.control.MouseEvent.prototype.setY = function (value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 buttons = 3;
 * @return {number}
 */
proto.android.emulation.control.MouseEvent.prototype.getButtons = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.MouseEvent} returns this
 */
proto.android.emulation.control.MouseEvent.prototype.setButtons = function (value) {
	return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 device = 4;
 * @return {number}
 */
proto.android.emulation.control.MouseEvent.prototype.getDevice = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.MouseEvent} returns this
 */
proto.android.emulation.control.MouseEvent.prototype.setDevice = function (value) {
	return jspb.Message.setProto3IntField(this, 4, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.KeyboardEvent.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.KeyboardEvent.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.KeyboardEvent} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.KeyboardEvent.toObject = function (includeInstance, msg) {
		var f, obj = {
			codetype: jspb.Message.getFieldWithDefault(msg, 1, 0),
			eventtype: jspb.Message.getFieldWithDefault(msg, 2, 0),
			keycode: jspb.Message.getFieldWithDefault(msg, 3, 0),
			key: jspb.Message.getFieldWithDefault(msg, 4, ""),
			text: jspb.Message.getFieldWithDefault(msg, 5, "")
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.KeyboardEvent}
 */
proto.android.emulation.control.KeyboardEvent.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.KeyboardEvent;
	return proto.android.emulation.control.KeyboardEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.KeyboardEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.KeyboardEvent}
 */
proto.android.emulation.control.KeyboardEvent.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.android.emulation.control.KeyboardEvent.KeyCodeType} */ (reader.readEnum());
				msg.setCodetype(value);
				break;
			case 2:
				var value = /** @type {!proto.android.emulation.control.KeyboardEvent.KeyEventType} */ (reader.readEnum());
				msg.setEventtype(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setKeycode(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.setKey(value);
				break;
			case 5:
				var value = /** @type {string} */ (reader.readString());
				msg.setText(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.KeyboardEvent.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.KeyboardEvent.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.KeyboardEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.KeyboardEvent.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getCodetype();
	if (f !== 0.0) {
		writer.writeEnum(
			1,
			f
		);
	}
	f = message.getEventtype();
	if (f !== 0.0) {
		writer.writeEnum(
			2,
			f
		);
	}
	f = message.getKeycode();
	if (f !== 0) {
		writer.writeInt32(
			3,
			f
		);
	}
	f = message.getKey();
	if (f.length > 0) {
		writer.writeString(
			4,
			f
		);
	}
	f = message.getText();
	if (f.length > 0) {
		writer.writeString(
			5,
			f
		);
	}
};


/**
 * @enum {number}
 */
proto.android.emulation.control.KeyboardEvent.KeyCodeType = {
	USB: 0,
	EVDEV: 1,
	XKB: 2,
	WIN: 3,
	MAC: 4
};

/**
 * @enum {number}
 */
proto.android.emulation.control.KeyboardEvent.KeyEventType = {
	KEYDOWN: 0,
	KEYUP: 1,
	KEYPRESS: 2
};

/**
 * optional KeyCodeType codeType = 1;
 * @return {!proto.android.emulation.control.KeyboardEvent.KeyCodeType}
 */
proto.android.emulation.control.KeyboardEvent.prototype.getCodetype = function () {
	return /** @type {!proto.android.emulation.control.KeyboardEvent.KeyCodeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.android.emulation.control.KeyboardEvent.KeyCodeType} value
 * @return {!proto.android.emulation.control.KeyboardEvent} returns this
 */
proto.android.emulation.control.KeyboardEvent.prototype.setCodetype = function (value) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional KeyEventType eventType = 2;
 * @return {!proto.android.emulation.control.KeyboardEvent.KeyEventType}
 */
proto.android.emulation.control.KeyboardEvent.prototype.getEventtype = function () {
	return /** @type {!proto.android.emulation.control.KeyboardEvent.KeyEventType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.android.emulation.control.KeyboardEvent.KeyEventType} value
 * @return {!proto.android.emulation.control.KeyboardEvent} returns this
 */
proto.android.emulation.control.KeyboardEvent.prototype.setEventtype = function (value) {
	return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 keyCode = 3;
 * @return {number}
 */
proto.android.emulation.control.KeyboardEvent.prototype.getKeycode = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.KeyboardEvent} returns this
 */
proto.android.emulation.control.KeyboardEvent.prototype.setKeycode = function (value) {
	return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string key = 4;
 * @return {string}
 */
proto.android.emulation.control.KeyboardEvent.prototype.getKey = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.android.emulation.control.KeyboardEvent} returns this
 */
proto.android.emulation.control.KeyboardEvent.prototype.setKey = function (value) {
	return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string text = 5;
 * @return {string}
 */
proto.android.emulation.control.KeyboardEvent.prototype.getText = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.android.emulation.control.KeyboardEvent} returns this
 */
proto.android.emulation.control.KeyboardEvent.prototype.setText = function (value) {
	return jspb.Message.setProto3StringField(this, 5, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.FingerprintEvent.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.FingerprintEvent.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.FingerprintEvent} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.FingerprintEvent.toObject = function (includeInstance, msg) {
		var f, obj = {
			istouching: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
			touchid: jspb.Message.getFieldWithDefault(msg, 2, 0)
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.FingerprintEvent}
 */
proto.android.emulation.control.FingerprintEvent.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.FingerprintEvent;
	return proto.android.emulation.control.FingerprintEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.FingerprintEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.FingerprintEvent}
 */
proto.android.emulation.control.FingerprintEvent.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {boolean} */ (reader.readBool());
				msg.setIstouching(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setTouchid(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.FingerprintEvent.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.FingerprintEvent.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.FingerprintEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.FingerprintEvent.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getIstouching();
	if (f) {
		writer.writeBool(
			1,
			f
		);
	}
	f = message.getTouchid();
	if (f !== 0) {
		writer.writeInt32(
			2,
			f
		);
	}
};


/**
 * optional bool isTouching = 1;
 * @return {boolean}
 */
proto.android.emulation.control.FingerprintEvent.prototype.getIstouching = function () {
	return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.android.emulation.control.FingerprintEvent} returns this
 */
proto.android.emulation.control.FingerprintEvent.prototype.setIstouching = function (value) {
	return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 touchId = 2;
 * @return {number}
 */
proto.android.emulation.control.FingerprintEvent.prototype.getTouchid = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.FingerprintEvent} returns this
 */
proto.android.emulation.control.FingerprintEvent.prototype.setTouchid = function (value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.GpsState.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.GpsState.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.GpsState} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.GpsState.toObject = function (includeInstance, msg) {
		var f, obj = {
			passiveupdate: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
			latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
			longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
			speed: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
			heading: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
			elevation: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
			satellites: jspb.Message.getFieldWithDefault(msg, 7, 0)
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.GpsState}
 */
proto.android.emulation.control.GpsState.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.GpsState;
	return proto.android.emulation.control.GpsState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.GpsState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.GpsState}
 */
proto.android.emulation.control.GpsState.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {boolean} */ (reader.readBool());
				msg.setPassiveupdate(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readDouble());
				msg.setLatitude(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readDouble());
				msg.setLongitude(value);
				break;
			case 4:
				var value = /** @type {number} */ (reader.readDouble());
				msg.setSpeed(value);
				break;
			case 5:
				var value = /** @type {number} */ (reader.readDouble());
				msg.setHeading(value);
				break;
			case 6:
				var value = /** @type {number} */ (reader.readDouble());
				msg.setElevation(value);
				break;
			case 7:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setSatellites(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.GpsState.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.GpsState.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.GpsState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.GpsState.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getPassiveupdate();
	if (f) {
		writer.writeBool(
			1,
			f
		);
	}
	f = message.getLatitude();
	if (f !== 0.0) {
		writer.writeDouble(
			2,
			f
		);
	}
	f = message.getLongitude();
	if (f !== 0.0) {
		writer.writeDouble(
			3,
			f
		);
	}
	f = message.getSpeed();
	if (f !== 0.0) {
		writer.writeDouble(
			4,
			f
		);
	}
	f = message.getHeading();
	if (f !== 0.0) {
		writer.writeDouble(
			5,
			f
		);
	}
	f = message.getElevation();
	if (f !== 0.0) {
		writer.writeDouble(
			6,
			f
		);
	}
	f = message.getSatellites();
	if (f !== 0) {
		writer.writeInt32(
			7,
			f
		);
	}
};


/**
 * optional bool passiveUpdate = 1;
 * @return {boolean}
 */
proto.android.emulation.control.GpsState.prototype.getPassiveupdate = function () {
	return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.android.emulation.control.GpsState} returns this
 */
proto.android.emulation.control.GpsState.prototype.setPassiveupdate = function (value) {
	return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional double latitude = 2;
 * @return {number}
 */
proto.android.emulation.control.GpsState.prototype.getLatitude = function () {
	return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.GpsState} returns this
 */
proto.android.emulation.control.GpsState.prototype.setLatitude = function (value) {
	return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double longitude = 3;
 * @return {number}
 */
proto.android.emulation.control.GpsState.prototype.getLongitude = function () {
	return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.GpsState} returns this
 */
proto.android.emulation.control.GpsState.prototype.setLongitude = function (value) {
	return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double speed = 4;
 * @return {number}
 */
proto.android.emulation.control.GpsState.prototype.getSpeed = function () {
	return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.GpsState} returns this
 */
proto.android.emulation.control.GpsState.prototype.setSpeed = function (value) {
	return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double heading = 5;
 * @return {number}
 */
proto.android.emulation.control.GpsState.prototype.getHeading = function () {
	return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.GpsState} returns this
 */
proto.android.emulation.control.GpsState.prototype.setHeading = function (value) {
	return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double elevation = 6;
 * @return {number}
 */
proto.android.emulation.control.GpsState.prototype.getElevation = function () {
	return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.GpsState} returns this
 */
proto.android.emulation.control.GpsState.prototype.setElevation = function (value) {
	return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional int32 satellites = 7;
 * @return {number}
 */
proto.android.emulation.control.GpsState.prototype.getSatellites = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.GpsState} returns this
 */
proto.android.emulation.control.GpsState.prototype.setSatellites = function (value) {
	return jspb.Message.setProto3IntField(this, 7, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.BatteryState.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.BatteryState.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.BatteryState} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.BatteryState.toObject = function (includeInstance, msg) {
		var f, obj = {
			hasbattery: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
			ispresent: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
			charger: jspb.Message.getFieldWithDefault(msg, 3, 0),
			chargelevel: jspb.Message.getFieldWithDefault(msg, 4, 0),
			health: jspb.Message.getFieldWithDefault(msg, 5, 0),
			status: jspb.Message.getFieldWithDefault(msg, 6, 0)
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.BatteryState}
 */
proto.android.emulation.control.BatteryState.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.BatteryState;
	return proto.android.emulation.control.BatteryState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.BatteryState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.BatteryState}
 */
proto.android.emulation.control.BatteryState.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {boolean} */ (reader.readBool());
				msg.setHasbattery(value);
				break;
			case 2:
				var value = /** @type {boolean} */ (reader.readBool());
				msg.setIspresent(value);
				break;
			case 3:
				var value = /** @type {!proto.android.emulation.control.BatteryState.BatteryCharger} */ (reader.readEnum());
				msg.setCharger(value);
				break;
			case 4:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setChargelevel(value);
				break;
			case 5:
				var value = /** @type {!proto.android.emulation.control.BatteryState.BatteryHealth} */ (reader.readEnum());
				msg.setHealth(value);
				break;
			case 6:
				var value = /** @type {!proto.android.emulation.control.BatteryState.BatteryStatus} */ (reader.readEnum());
				msg.setStatus(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.BatteryState.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.BatteryState.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.BatteryState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.BatteryState.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getHasbattery();
	if (f) {
		writer.writeBool(
			1,
			f
		);
	}
	f = message.getIspresent();
	if (f) {
		writer.writeBool(
			2,
			f
		);
	}
	f = message.getCharger();
	if (f !== 0.0) {
		writer.writeEnum(
			3,
			f
		);
	}
	f = message.getChargelevel();
	if (f !== 0) {
		writer.writeInt32(
			4,
			f
		);
	}
	f = message.getHealth();
	if (f !== 0.0) {
		writer.writeEnum(
			5,
			f
		);
	}
	f = message.getStatus();
	if (f !== 0.0) {
		writer.writeEnum(
			6,
			f
		);
	}
};


/**
 * @enum {number}
 */
proto.android.emulation.control.BatteryState.BatteryStatus = {
	BATTERY_STATUS_UNKNOWN: 0,
	BATTERY_STATUS_CHARGING: 1,
	BATTERY_STATUS_DISCHARGING: 2,
	BATTERY_STATUS_NOT_CHARGING: 3,
	BATTERY_STATUS_FULL: 4
};

/**
 * @enum {number}
 */
proto.android.emulation.control.BatteryState.BatteryCharger = {
	BATTERY_CHARGER_NONE: 0,
	BATTERY_CHARGER_AC: 1,
	BATTERY_CHARGER_USB: 2,
	BATTERY_CHARGER_WIRELESS: 3
};

/**
 * @enum {number}
 */
proto.android.emulation.control.BatteryState.BatteryHealth = {
	BATTERY_HEALTH_GOOD: 0,
	BATTERY_HEALTH_FAILED: 1,
	BATTERY_HEALTH_DEAD: 2,
	BATTERY_HEALTH_OVERVOLTAGE: 3,
	BATTERY_HEALTH_OVERHEATED: 4
};

/**
 * optional bool hasBattery = 1;
 * @return {boolean}
 */
proto.android.emulation.control.BatteryState.prototype.getHasbattery = function () {
	return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.android.emulation.control.BatteryState} returns this
 */
proto.android.emulation.control.BatteryState.prototype.setHasbattery = function (value) {
	return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool isPresent = 2;
 * @return {boolean}
 */
proto.android.emulation.control.BatteryState.prototype.getIspresent = function () {
	return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.android.emulation.control.BatteryState} returns this
 */
proto.android.emulation.control.BatteryState.prototype.setIspresent = function (value) {
	return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional BatteryCharger charger = 3;
 * @return {!proto.android.emulation.control.BatteryState.BatteryCharger}
 */
proto.android.emulation.control.BatteryState.prototype.getCharger = function () {
	return /** @type {!proto.android.emulation.control.BatteryState.BatteryCharger} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.android.emulation.control.BatteryState.BatteryCharger} value
 * @return {!proto.android.emulation.control.BatteryState} returns this
 */
proto.android.emulation.control.BatteryState.prototype.setCharger = function (value) {
	return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 chargeLevel = 4;
 * @return {number}
 */
proto.android.emulation.control.BatteryState.prototype.getChargelevel = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.BatteryState} returns this
 */
proto.android.emulation.control.BatteryState.prototype.setChargelevel = function (value) {
	return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional BatteryHealth health = 5;
 * @return {!proto.android.emulation.control.BatteryState.BatteryHealth}
 */
proto.android.emulation.control.BatteryState.prototype.getHealth = function () {
	return /** @type {!proto.android.emulation.control.BatteryState.BatteryHealth} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.android.emulation.control.BatteryState.BatteryHealth} value
 * @return {!proto.android.emulation.control.BatteryState} returns this
 */
proto.android.emulation.control.BatteryState.prototype.setHealth = function (value) {
	return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional BatteryStatus status = 6;
 * @return {!proto.android.emulation.control.BatteryState.BatteryStatus}
 */
proto.android.emulation.control.BatteryState.prototype.getStatus = function () {
	return /** @type {!proto.android.emulation.control.BatteryState.BatteryStatus} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.android.emulation.control.BatteryState.BatteryStatus} value
 * @return {!proto.android.emulation.control.BatteryState} returns this
 */
proto.android.emulation.control.BatteryState.prototype.setStatus = function (value) {
	return jspb.Message.setProto3EnumField(this, 6, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.ImageStream.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.ImageStream.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.ImageStream} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.ImageStream.toObject = function (includeInstance, msg) {
		var f, obj = {
			framerate: jspb.Message.getFieldWithDefault(msg, 1, 0),
			format: (f = msg.getFormat()) && proto.android.emulation.control.ImageFormat.toObject(includeInstance, f)
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.ImageStream}
 */
proto.android.emulation.control.ImageStream.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.ImageStream;
	return proto.android.emulation.control.ImageStream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.ImageStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.ImageStream}
 */
proto.android.emulation.control.ImageStream.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readUint32());
				msg.setFramerate(value);
				break;
			case 2:
				var value = new proto.android.emulation.control.ImageFormat;
				reader.readMessage(value, proto.android.emulation.control.ImageFormat.deserializeBinaryFromReader);
				msg.setFormat(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.ImageStream.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.ImageStream.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.ImageStream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.ImageStream.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getFramerate();
	if (f !== 0) {
		writer.writeUint32(
			1,
			f
		);
	}
	f = message.getFormat();
	if (f != null) {
		writer.writeMessage(
			2,
			f,
			proto.android.emulation.control.ImageFormat.serializeBinaryToWriter
		);
	}
};


/**
 * optional uint32 framerate = 1;
 * @return {number}
 */
proto.android.emulation.control.ImageStream.prototype.getFramerate = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.ImageStream} returns this
 */
proto.android.emulation.control.ImageStream.prototype.setFramerate = function (value) {
	return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ImageFormat format = 2;
 * @return {?proto.android.emulation.control.ImageFormat}
 */
proto.android.emulation.control.ImageStream.prototype.getFormat = function () {
	return /** @type{?proto.android.emulation.control.ImageFormat} */ (
		jspb.Message.getWrapperField(this, proto.android.emulation.control.ImageFormat, 2));
};


/**
 * @param {?proto.android.emulation.control.ImageFormat|undefined} value
 * @return {!proto.android.emulation.control.ImageStream} returns this
 */
proto.android.emulation.control.ImageStream.prototype.setFormat = function (value) {
	return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.android.emulation.control.ImageStream} returns this
 */
proto.android.emulation.control.ImageStream.prototype.clearFormat = function () {
	return this.setFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.android.emulation.control.ImageStream.prototype.hasFormat = function () {
	return jspb.Message.getField(this, 2) != null;
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.ImageFormat.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.ImageFormat.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.ImageFormat} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.ImageFormat.toObject = function (includeInstance, msg) {
		var f, obj = {
			format: jspb.Message.getFieldWithDefault(msg, 1, 0),
			rotation: (f = msg.getRotation()) && proto.android.emulation.control.Rotation.toObject(includeInstance, f)
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.ImageFormat}
 */
proto.android.emulation.control.ImageFormat.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.ImageFormat;
	return proto.android.emulation.control.ImageFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.ImageFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.ImageFormat}
 */
proto.android.emulation.control.ImageFormat.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.android.emulation.control.ImageFormat.ImgFormat} */ (reader.readEnum());
				msg.setFormat(value);
				break;
			case 2:
				var value = new proto.android.emulation.control.Rotation;
				reader.readMessage(value, proto.android.emulation.control.Rotation.deserializeBinaryFromReader);
				msg.setRotation(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.ImageFormat.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.ImageFormat.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.ImageFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.ImageFormat.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getFormat();
	if (f !== 0.0) {
		writer.writeEnum(
			1,
			f
		);
	}
	f = message.getRotation();
	if (f != null) {
		writer.writeMessage(
			2,
			f,
			proto.android.emulation.control.Rotation.serializeBinaryToWriter
		);
	}
};


/**
 * @enum {number}
 */
proto.android.emulation.control.ImageFormat.ImgFormat = {
	PNG: 0,
	RAW: 1,
	RGB888: 2,
	RGBA8888: 3
};

/**
 * optional ImgFormat format = 1;
 * @return {!proto.android.emulation.control.ImageFormat.ImgFormat}
 */
proto.android.emulation.control.ImageFormat.prototype.getFormat = function () {
	return /** @type {!proto.android.emulation.control.ImageFormat.ImgFormat} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.android.emulation.control.ImageFormat.ImgFormat} value
 * @return {!proto.android.emulation.control.ImageFormat} returns this
 */
proto.android.emulation.control.ImageFormat.prototype.setFormat = function (value) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Rotation rotation = 2;
 * @return {?proto.android.emulation.control.Rotation}
 */
proto.android.emulation.control.ImageFormat.prototype.getRotation = function () {
	return /** @type{?proto.android.emulation.control.Rotation} */ (
		jspb.Message.getWrapperField(this, proto.android.emulation.control.Rotation, 2));
};


/**
 * @param {?proto.android.emulation.control.Rotation|undefined} value
 * @return {!proto.android.emulation.control.ImageFormat} returns this
 */
proto.android.emulation.control.ImageFormat.prototype.setRotation = function (value) {
	return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.android.emulation.control.ImageFormat} returns this
 */
proto.android.emulation.control.ImageFormat.prototype.clearRotation = function () {
	return this.setRotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.android.emulation.control.ImageFormat.prototype.hasRotation = function () {
	return jspb.Message.getField(this, 2) != null;
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.Image.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.Image.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.Image} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.Image.toObject = function (includeInstance, msg) {
		var f, obj = {
			format: (f = msg.getFormat()) && proto.android.emulation.control.ImageFormat.toObject(includeInstance, f),
			width: jspb.Message.getFieldWithDefault(msg, 2, 0),
			height: jspb.Message.getFieldWithDefault(msg, 3, 0),
			image: msg.getImage_asB64()
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.Image}
 */
proto.android.emulation.control.Image.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.Image;
	return proto.android.emulation.control.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.Image}
 */
proto.android.emulation.control.Image.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.android.emulation.control.ImageFormat;
				reader.readMessage(value, proto.android.emulation.control.ImageFormat.deserializeBinaryFromReader);
				msg.setFormat(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readUint32());
				msg.setWidth(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readUint32());
				msg.setHeight(value);
				break;
			case 4:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setImage(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.Image.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.Image.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.Image.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getFormat();
	if (f != null) {
		writer.writeMessage(
			1,
			f,
			proto.android.emulation.control.ImageFormat.serializeBinaryToWriter
		);
	}
	f = message.getWidth();
	if (f !== 0) {
		writer.writeUint32(
			2,
			f
		);
	}
	f = message.getHeight();
	if (f !== 0) {
		writer.writeUint32(
			3,
			f
		);
	}
	f = message.getImage_asU8();
	if (f.length > 0) {
		writer.writeBytes(
			4,
			f
		);
	}
};


/**
 * optional ImageFormat format = 1;
 * @return {?proto.android.emulation.control.ImageFormat}
 */
proto.android.emulation.control.Image.prototype.getFormat = function () {
	return /** @type{?proto.android.emulation.control.ImageFormat} */ (
		jspb.Message.getWrapperField(this, proto.android.emulation.control.ImageFormat, 1));
};


/**
 * @param {?proto.android.emulation.control.ImageFormat|undefined} value
 * @return {!proto.android.emulation.control.Image} returns this
 */
proto.android.emulation.control.Image.prototype.setFormat = function (value) {
	return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.android.emulation.control.Image} returns this
 */
proto.android.emulation.control.Image.prototype.clearFormat = function () {
	return this.setFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.android.emulation.control.Image.prototype.hasFormat = function () {
	return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 width = 2;
 * @return {number}
 */
proto.android.emulation.control.Image.prototype.getWidth = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.Image} returns this
 */
proto.android.emulation.control.Image.prototype.setWidth = function (value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 height = 3;
 * @return {number}
 */
proto.android.emulation.control.Image.prototype.getHeight = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.Image} returns this
 */
proto.android.emulation.control.Image.prototype.setHeight = function (value) {
	return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes image = 4;
 * @return {string}
 */
proto.android.emulation.control.Image.prototype.getImage = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes image = 4;
 * This is a type-conversion wrapper around `getImage()`
 * @return {string}
 */
proto.android.emulation.control.Image.prototype.getImage_asB64 = function () {
	return /** @type {string} */ (jspb.Message.bytesAsB64(
		this.getImage()));
};


/**
 * optional bytes image = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImage()`
 * @return {!Uint8Array}
 */
proto.android.emulation.control.Image.prototype.getImage_asU8 = function () {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
		this.getImage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.android.emulation.control.Image} returns this
 */
proto.android.emulation.control.Image.prototype.setImage = function (value) {
	return jspb.Message.setProto3BytesField(this, 4, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.Rotation.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.Rotation.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.Rotation} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.Rotation.toObject = function (includeInstance, msg) {
		var f, obj = {
			rotation: jspb.Message.getFieldWithDefault(msg, 1, 0)
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.Rotation}
 */
proto.android.emulation.control.Rotation.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.Rotation;
	return proto.android.emulation.control.Rotation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.Rotation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.Rotation}
 */
proto.android.emulation.control.Rotation.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.android.emulation.control.Rotation.SkinRotation} */ (reader.readEnum());
				msg.setRotation(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.Rotation.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.Rotation.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.Rotation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.Rotation.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getRotation();
	if (f !== 0.0) {
		writer.writeEnum(
			1,
			f
		);
	}
};


/**
 * @enum {number}
 */
proto.android.emulation.control.Rotation.SkinRotation = {
	SKIN_ROTATION_0: 0,
	SKIN_ROTATION_90: 1,
	SKIN_ROTATION_180: 2,
	SKIN_ROTATION_270: 3
};

/**
 * optional SkinRotation rotation = 1;
 * @return {!proto.android.emulation.control.Rotation.SkinRotation}
 */
proto.android.emulation.control.Rotation.prototype.getRotation = function () {
	return /** @type {!proto.android.emulation.control.Rotation.SkinRotation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.android.emulation.control.Rotation.SkinRotation} value
 * @return {!proto.android.emulation.control.Rotation} returns this
 */
proto.android.emulation.control.Rotation.prototype.setRotation = function (value) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.TelephoneOperation.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.TelephoneOperation.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.TelephoneOperation} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.TelephoneOperation.toObject = function (includeInstance, msg) {
		var f, obj = {
			operation: jspb.Message.getFieldWithDefault(msg, 1, 0),
			number: jspb.Message.getFieldWithDefault(msg, 2, "")
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.TelephoneOperation}
 */
proto.android.emulation.control.TelephoneOperation.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.TelephoneOperation;
	return proto.android.emulation.control.TelephoneOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.TelephoneOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.TelephoneOperation}
 */
proto.android.emulation.control.TelephoneOperation.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.android.emulation.control.TelephoneOperation.Operation} */ (reader.readEnum());
				msg.setOperation(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setNumber(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.TelephoneOperation.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.TelephoneOperation.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.TelephoneOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.TelephoneOperation.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getOperation();
	if (f !== 0.0) {
		writer.writeEnum(
			1,
			f
		);
	}
	f = message.getNumber();
	if (f.length > 0) {
		writer.writeString(
			2,
			f
		);
	}
};


/**
 * @enum {number}
 */
proto.android.emulation.control.TelephoneOperation.Operation = {
	INITCALL: 0,
	ACCEPTCALL: 1,
	REJECTCALLEXPLICIT: 2,
	REJECTCALLBUSY: 3,
	DISCONNECTCALL: 4,
	PLACECALLONHOLD: 5,
	TAKECALLOFFHOLD: 6
};

/**
 * optional Operation operation = 1;
 * @return {!proto.android.emulation.control.TelephoneOperation.Operation}
 */
proto.android.emulation.control.TelephoneOperation.prototype.getOperation = function () {
	return /** @type {!proto.android.emulation.control.TelephoneOperation.Operation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.android.emulation.control.TelephoneOperation.Operation} value
 * @return {!proto.android.emulation.control.TelephoneOperation} returns this
 */
proto.android.emulation.control.TelephoneOperation.prototype.setOperation = function (value) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string number = 2;
 * @return {string}
 */
proto.android.emulation.control.TelephoneOperation.prototype.getNumber = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.android.emulation.control.TelephoneOperation} returns this
 */
proto.android.emulation.control.TelephoneOperation.prototype.setNumber = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.TelephoneResponse.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.TelephoneResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.TelephoneResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.TelephoneResponse.toObject = function (includeInstance, msg) {
		var f, obj = {
			response: jspb.Message.getFieldWithDefault(msg, 1, 0)
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.TelephoneResponse}
 */
proto.android.emulation.control.TelephoneResponse.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.TelephoneResponse;
	return proto.android.emulation.control.TelephoneResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.TelephoneResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.TelephoneResponse}
 */
proto.android.emulation.control.TelephoneResponse.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!proto.android.emulation.control.TelephoneResponse.Response} */ (reader.readEnum());
				msg.setResponse(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.TelephoneResponse.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.TelephoneResponse.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.TelephoneResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.TelephoneResponse.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getResponse();
	if (f !== 0.0) {
		writer.writeEnum(
			1,
			f
		);
	}
};


/**
 * @enum {number}
 */
proto.android.emulation.control.TelephoneResponse.Response = {
	OK: 0,
	BADOPERATION: 1,
	BADNUMBER: 2,
	INVALIDACTION: 3,
	ACTIONFAILED: 4,
	RADIOOFF: 5
};

/**
 * optional Response response = 1;
 * @return {!proto.android.emulation.control.TelephoneResponse.Response}
 */
proto.android.emulation.control.TelephoneResponse.prototype.getResponse = function () {
	return /** @type {!proto.android.emulation.control.TelephoneResponse.Response} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.android.emulation.control.TelephoneResponse.Response} value
 * @return {!proto.android.emulation.control.TelephoneResponse} returns this
 */
proto.android.emulation.control.TelephoneResponse.prototype.setResponse = function (value) {
	return jspb.Message.setProto3EnumField(this, 1, value);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.Entry.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.Entry.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.Entry} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.Entry.toObject = function (includeInstance, msg) {
		var f, obj = {
			key: jspb.Message.getFieldWithDefault(msg, 1, ""),
			value: jspb.Message.getFieldWithDefault(msg, 2, "")
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.Entry}
 */
proto.android.emulation.control.Entry.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.Entry;
	return proto.android.emulation.control.Entry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.Entry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.Entry}
 */
proto.android.emulation.control.Entry.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setKey(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setValue(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.Entry.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.Entry.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.Entry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.Entry.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getKey();
	if (f.length > 0) {
		writer.writeString(
			1,
			f
		);
	}
	f = message.getValue();
	if (f.length > 0) {
		writer.writeString(
			2,
			f
		);
	}
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.android.emulation.control.Entry.prototype.getKey = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.android.emulation.control.Entry} returns this
 */
proto.android.emulation.control.Entry.prototype.setKey = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.android.emulation.control.Entry.prototype.getValue = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.android.emulation.control.Entry} returns this
 */
proto.android.emulation.control.Entry.prototype.setValue = function (value) {
	return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.android.emulation.control.EntryList.repeatedFields_ = [1];


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.EntryList.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.EntryList.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.EntryList} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.EntryList.toObject = function (includeInstance, msg) {
		var f, obj = {
			entryList: jspb.Message.toObjectList(msg.getEntryList(),
				proto.android.emulation.control.Entry.toObject, includeInstance)
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.EntryList}
 */
proto.android.emulation.control.EntryList.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.EntryList;
	return proto.android.emulation.control.EntryList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.EntryList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.EntryList}
 */
proto.android.emulation.control.EntryList.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = new proto.android.emulation.control.Entry;
				reader.readMessage(value, proto.android.emulation.control.Entry.deserializeBinaryFromReader);
				msg.addEntry(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.EntryList.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.EntryList.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.EntryList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.EntryList.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getEntryList();
	if (f.length > 0) {
		writer.writeRepeatedMessage(
			1,
			f,
			proto.android.emulation.control.Entry.serializeBinaryToWriter
		);
	}
};


/**
 * repeated Entry entry = 1;
 * @return {!Array<!proto.android.emulation.control.Entry>}
 */
proto.android.emulation.control.EntryList.prototype.getEntryList = function () {
	return /** @type{!Array<!proto.android.emulation.control.Entry>} */ (
		jspb.Message.getRepeatedWrapperField(this, proto.android.emulation.control.Entry, 1));
};


/**
 * @param {!Array<!proto.android.emulation.control.Entry>} value
 * @return {!proto.android.emulation.control.EntryList} returns this
 */
proto.android.emulation.control.EntryList.prototype.setEntryList = function (value) {
	return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.android.emulation.control.Entry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.android.emulation.control.Entry}
 */
proto.android.emulation.control.EntryList.prototype.addEntry = function (opt_value, opt_index) {
	return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.android.emulation.control.Entry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.android.emulation.control.EntryList} returns this
 */
proto.android.emulation.control.EntryList.prototype.clearEntryList = function () {
	return this.setEntryList([]);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.android.emulation.control.EmulatorStatus.prototype.toObject = function (opt_includeInstance) {
		return proto.android.emulation.control.EmulatorStatus.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.android.emulation.control.EmulatorStatus} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.android.emulation.control.EmulatorStatus.toObject = function (includeInstance, msg) {
		var f, obj = {
			version: jspb.Message.getFieldWithDefault(msg, 1, ""),
			uptime: jspb.Message.getFieldWithDefault(msg, 2, 0),
			booted: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
			vmconfig: (f = msg.getVmconfig()) && proto.android.emulation.control.VmConfiguration.toObject(includeInstance, f),
			hardwareconfig: (f = msg.getHardwareconfig()) && proto.android.emulation.control.EntryList.toObject(includeInstance, f)
		};

		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.EmulatorStatus}
 */
proto.android.emulation.control.EmulatorStatus.deserializeBinary = function (bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.android.emulation.control.EmulatorStatus;
	return proto.android.emulation.control.EmulatorStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.EmulatorStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.EmulatorStatus}
 */
proto.android.emulation.control.EmulatorStatus.deserializeBinaryFromReader = function (msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setVersion(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readUint64());
				msg.setUptime(value);
				break;
			case 3:
				var value = /** @type {boolean} */ (reader.readBool());
				msg.setBooted(value);
				break;
			case 4:
				var value = new proto.android.emulation.control.VmConfiguration;
				reader.readMessage(value, proto.android.emulation.control.VmConfiguration.deserializeBinaryFromReader);
				msg.setVmconfig(value);
				break;
			case 5:
				var value = new proto.android.emulation.control.EntryList;
				reader.readMessage(value, proto.android.emulation.control.EntryList.deserializeBinaryFromReader);
				msg.setHardwareconfig(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.EmulatorStatus.prototype.serializeBinary = function () {
	var writer = new jspb.BinaryWriter();
	proto.android.emulation.control.EmulatorStatus.serializeBinaryToWriter(this, writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.EmulatorStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.EmulatorStatus.serializeBinaryToWriter = function (message, writer) {
	var f = undefined;
	f = message.getVersion();
	if (f.length > 0) {
		writer.writeString(
			1,
			f
		);
	}
	f = message.getUptime();
	if (f !== 0) {
		writer.writeUint64(
			2,
			f
		);
	}
	f = message.getBooted();
	if (f) {
		writer.writeBool(
			3,
			f
		);
	}
	f = message.getVmconfig();
	if (f != null) {
		writer.writeMessage(
			4,
			f,
			proto.android.emulation.control.VmConfiguration.serializeBinaryToWriter
		);
	}
	f = message.getHardwareconfig();
	if (f != null) {
		writer.writeMessage(
			5,
			f,
			proto.android.emulation.control.EntryList.serializeBinaryToWriter
		);
	}
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.android.emulation.control.EmulatorStatus.prototype.getVersion = function () {
	return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.android.emulation.control.EmulatorStatus} returns this
 */
proto.android.emulation.control.EmulatorStatus.prototype.setVersion = function (value) {
	return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 uptime = 2;
 * @return {number}
 */
proto.android.emulation.control.EmulatorStatus.prototype.getUptime = function () {
	return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.android.emulation.control.EmulatorStatus} returns this
 */
proto.android.emulation.control.EmulatorStatus.prototype.setUptime = function (value) {
	return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool booted = 3;
 * @return {boolean}
 */
proto.android.emulation.control.EmulatorStatus.prototype.getBooted = function () {
	return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.android.emulation.control.EmulatorStatus} returns this
 */
proto.android.emulation.control.EmulatorStatus.prototype.setBooted = function (value) {
	return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional VmConfiguration vmConfig = 4;
 * @return {?proto.android.emulation.control.VmConfiguration}
 */
proto.android.emulation.control.EmulatorStatus.prototype.getVmconfig = function () {
	return /** @type{?proto.android.emulation.control.VmConfiguration} */ (
		jspb.Message.getWrapperField(this, proto.android.emulation.control.VmConfiguration, 4));
};


/**
 * @param {?proto.android.emulation.control.VmConfiguration|undefined} value
 * @return {!proto.android.emulation.control.EmulatorStatus} returns this
 */
proto.android.emulation.control.EmulatorStatus.prototype.setVmconfig = function (value) {
	return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.android.emulation.control.EmulatorStatus} returns this
 */
proto.android.emulation.control.EmulatorStatus.prototype.clearVmconfig = function () {
	return this.setVmconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.android.emulation.control.EmulatorStatus.prototype.hasVmconfig = function () {
	return jspb.Message.getField(this, 4) != null;
};


/**
 * optional EntryList hardwareConfig = 5;
 * @return {?proto.android.emulation.control.EntryList}
 */
proto.android.emulation.control.EmulatorStatus.prototype.getHardwareconfig = function () {
	return /** @type{?proto.android.emulation.control.EntryList} */ (
		jspb.Message.getWrapperField(this, proto.android.emulation.control.EntryList, 5));
};


/**
 * @param {?proto.android.emulation.control.EntryList|undefined} value
 * @return {!proto.android.emulation.control.EmulatorStatus} returns this
 */
proto.android.emulation.control.EmulatorStatus.prototype.setHardwareconfig = function (value) {
	return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.android.emulation.control.EmulatorStatus} returns this
 */
proto.android.emulation.control.EmulatorStatus.prototype.clearHardwareconfig = function () {
	return this.setHardwareconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.android.emulation.control.EmulatorStatus.prototype.hasHardwareconfig = function () {
	return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.android.emulation.control);
